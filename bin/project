#!/usr/bin/env node

require("kaffeine");

var sys = require('sys'),
exec = require('child_process').exec,
lib = require('../core/lib'),
util = require('util');

var cwd = process.cwd();
var gitUrl = "git@github.com:benekastah/express-gen.git";
var args = new lib.ArgumentList(process.argv, 2);
var projectDir = cwd + "/" + args[0];

console.log("git clone " + gitUrl + " " + projectDir);
exec("git clone " + gitUrl + " " + projectDir, function (err, stdout, stderr) {
   if (stdout) sys.puts(stdout);
   if (stderr) console.error(stderr);
   if (err) console.error(err);
   
   if (!args.named.version && !args.named.branch) {
      exec("cd " + projectDir + '; ' + "git tag -l", function (err, stdout, stderr) {
         
         tags = stdout.split("\n");
         
         var latest = { major: 0, minor: 0, patch: 0 };
         tags.forEach(function (item, i) {
            tag = item.replace(/^v/, '').split(/\.|\-/);
            tags[i] = { major: tag[0] || 0, minor: tag[1] || 0, patch: tag[2] || 0, flags: tag[3], text: item };
            
            
            if (/release/.test(tags[i].flags)
               && (tags[i].major > latest.major
               || (tags[i].major === latest.major && tags[i].minor > latest.minor
               || (tags[i].minor === latest.minor && tags[i].patch > latest.patch))))
               latest = tags[i];
         });
         
         console.log(tags)
         
         checkout({version: latest.text})
      });
   } else if (args.named.version)
      checkout({version: args.named.version});
   else
      checkout({branch: args.named.branch});
   
   function checkout(config) {
      console.log("cd " + projectDir + '; ' + "git checkout " + (config.version ? 'tags/v' + config.version : config.branch));
      exec("cd " + projectDir + '; ' + "git checkout " + (config.version ? 'tags/v' + config.version : config.branch), function (err, stdout, stderr) {
         if (stdout) sys.puts(stdout);
         if (stderr) console.error(stderr);
         if (err) console.error(err);
      });
   }
});

